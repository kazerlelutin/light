                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module scroll
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _VDP_DisableSpritesFrom
                                     12 	.globl _VDP_SetSpritePositionX
                                     13 	.globl _VDP_SetSpriteExUniColor
                                     14 	.globl _VDP_SetAdjustOffset
                                     15 	.globl _VDP_FillVRAM_128K
                                     16 	.globl _VDP_WriteVRAM_16K
                                     17 	.globl _VDP_RegWriteBakMask
                                     18 	.globl _VDP_RegWrite
                                     19 	.globl _g_Scroll_Adjust
                                     20 	.globl _g_Scroll_TileY
                                     21 	.globl _g_Scroll_OffsetY
                                     22 	.globl _g_Scroll_TileX
                                     23 	.globl _g_Scroll_OffsetX
                                     24 	.globl _g_Scroll_Map
                                     25 	.globl _g_SLTSL
                                     26 	.globl _g_GRPACY
                                     27 	.globl _g_GRPACX
                                     28 	.globl _g_LOGOPR
                                     29 	.globl _g_CMASK
                                     30 	.globl _g_CLOC
                                     31 	.globl _g_FNKSTR
                                     32 	.globl _g_ATRBYT
                                     33 	.globl _g_BDRCLR
                                     34 	.globl _g_BAKCLR
                                     35 	.globl _g_FORCLR
                                     36 	.globl _g_CSRX
                                     37 	.globl _g_CSRY
                                     38 	.globl _g_CLIKSW
                                     39 	.globl _g_MLTPAT
                                     40 	.globl _g_MLTATR
                                     41 	.globl _g_MLTCGP
                                     42 	.globl _g_MLTCOL
                                     43 	.globl _g_MLTNAM
                                     44 	.globl _g_GRPPAT
                                     45 	.globl _g_GRPATR
                                     46 	.globl _g_GRPCGP
                                     47 	.globl _g_GRPCOL
                                     48 	.globl _g_GRPNAM
                                     49 	.globl _g_T32PAT
                                     50 	.globl _g_T32ATR
                                     51 	.globl _g_T32CGP
                                     52 	.globl _g_T32COL
                                     53 	.globl _g_T32NAM
                                     54 	.globl _g_TXTPAT
                                     55 	.globl _g_TXTATR
                                     56 	.globl _g_TXTCGP
                                     57 	.globl _g_TXTCOL
                                     58 	.globl _g_TXTNAM
                                     59 	.globl _g_CLMLST
                                     60 	.globl _g_CRTCNT
                                     61 	.globl _g_LINLEN
                                     62 	.globl _g_LINL32
                                     63 	.globl _g_LINL40
                                     64 	.globl _g_SVFFFD
                                     65 	.globl _g_RG27SAV
                                     66 	.globl _g_RG26SAV
                                     67 	.globl _g_RG25SAV
                                     68 	.globl _g_SVFFF8
                                     69 	.globl _g_MINROM
                                     70 	.globl _g_RG23SAV
                                     71 	.globl _g_RG22SAV
                                     72 	.globl _g_RG21SAV
                                     73 	.globl _g_RG20SAV
                                     74 	.globl _g_RG19SAV
                                     75 	.globl _g_RG18SAV
                                     76 	.globl _g_RG17SAV
                                     77 	.globl _g_RG16SAV
                                     78 	.globl _g_RG15SAV
                                     79 	.globl _g_RG14SAV
                                     80 	.globl _g_RG13SAV
                                     81 	.globl _g_RG12SAV
                                     82 	.globl _g_RG11SAV
                                     83 	.globl _g_RG10SAV
                                     84 	.globl _g_RG09SAV
                                     85 	.globl _g_RG08SAV
                                     86 	.globl _g_PROCNM
                                     87 	.globl _g_SLTWRK
                                     88 	.globl _g_SLTATR
                                     89 	.globl _g_SLTTBL
                                     90 	.globl _g_EXPTBL
                                     91 	.globl _g_MNROM
                                     92 	.globl _g_DRWANG
                                     93 	.globl _g_DRWSCL
                                     94 	.globl _g_DRWFLG
                                     95 	.globl _g_GYPOS
                                     96 	.globl _g_GXPOS
                                     97 	.globl _g_BRDATR
                                     98 	.globl _g_CASPRV
                                     99 	.globl _g_OLDSCR
                                    100 	.globl _g_SCRMOD
                                    101 	.globl _g_FLBMEM
                                    102 	.globl _g_KANAMD
                                    103 	.globl _g_KANAST
                                    104 	.globl _g_CAPST
                                    105 	.globl _g_CSTYLE
                                    106 	.globl _g_CSRSW
                                    107 	.globl _g_INSFLG
                                    108 	.globl _g_ESCCNT
                                    109 	.globl _g_GRPHED
                                    110 	.globl _g_WINWID
                                    111 	.globl _g_LOWLIM
                                    112 	.globl _g_INTCNT
                                    113 	.globl _g_INTVAL
                                    114 	.globl _g_JIFFY
                                    115 	.globl _g_PADX
                                    116 	.globl _g_PADY
                                    117 	.globl _g_INTFLG
                                    118 	.globl _g_RTYCNT
                                    119 	.globl _g_TRPTBL
                                    120 	.globl _g_HIMEM
                                    121 	.globl _g_BOTTOM
                                    122 	.globl _g_PATWRK
                                    123 	.globl _g_LINWRK
                                    124 	.globl _g_KEYBUF
                                    125 	.globl _g_NEWKEY
                                    126 	.globl _g_OLDKEY
                                    127 	.globl _g_CLIKFL
                                    128 	.globl _g_ONGSBF
                                    129 	.globl _g_FNKFLG
                                    130 	.globl _g_FNKSWI
                                    131 	.globl _g_CODSAV
                                    132 	.globl _g_FSTPOS
                                    133 	.globl _g_LINTTB
                                    134 	.globl _g_BASROM
                                    135 	.globl _g_ENSTOP
                                    136 	.globl _g_VCBC
                                    137 	.globl _g_VCBB
                                    138 	.globl _g_VCBA
                                    139 	.globl _g_PLYCNT
                                    140 	.globl _g_MUSICF
                                    141 	.globl _g_QUEUEN
                                    142 	.globl _g_MCLPTR
                                    143 	.globl _g_MCLLEN
                                    144 	.globl _g_SAVVOL
                                    145 	.globl _g_VOICEN
                                    146 	.globl _g_SAVSP
                                    147 	.globl _g_PRSCNT
                                    148 	.globl _g_LSTMOD
                                    149 	.globl _g_LSTCOM
                                    150 	.globl _g_COMMSK
                                    151 	.globl _g_ESTBLS
                                    152 	.globl _g_FLAGS
                                    153 	.globl _g_ERRORS
                                    154 	.globl _g_DATCNT
                                    155 	.globl _g_DEVNUM
                                    156 	.globl _g_OLDINT
                                    157 	.globl _g_OLDSTT
                                    158 	.globl _g_MEXBIh
                                    159 	.globl _g_RSIQLN
                                    160 	.globl _g_RSFCB
                                    161 	.globl _g_TOCNT
                                    162 	.globl _g_RSTMP
                                    163 	.globl _g_YSAVE
                                    164 	.globl _g_XSAVE
                                    165 	.globl _g_NORUSE
                                    166 	.globl _g_MODE
                                    167 	.globl _g_ROMA
                                    168 	.globl _g_CHRCNT
                                    169 	.globl _g_EXBRSA
                                    170 	.globl _g_AVCSAV
                                    171 	.globl _g_ACPAGE
                                    172 	.globl _g_DPPAGE
                                    173 	.globl _g_RS2IQ
                                    174 	.globl _g_VOICCQ
                                    175 	.globl _g_VOICBQ
                                    176 	.globl _g_VOICAQ
                                    177 	.globl _g_QUEBAK
                                    178 	.globl _g_QUETAB
                                    179 	.globl _g_ASPCT2
                                    180 	.globl _g_ASPCT1
                                    181 	.globl _g_HEADER
                                    182 	.globl _g_HIGH
                                    183 	.globl _g_LOW
                                    184 	.globl _g_CS240
                                    185 	.globl _g_CS120
                                    186 	.globl _g_GETPNT
                                    187 	.globl _g_PUTPNT
                                    188 	.globl _g_REPCNT
                                    189 	.globl _g_SCNCNT
                                    190 	.globl _g_FRCNEW
                                    191 	.globl _g_QUEUES
                                    192 	.globl _g_MINUPD
                                    193 	.globl _g_MAXUPD
                                    194 	.globl _g_TRGFLG
                                    195 	.globl _g_STATFL
                                    196 	.globl _g_RG7SAV
                                    197 	.globl _g_RG6SAV
                                    198 	.globl _g_RG5SAV
                                    199 	.globl _g_RG4SAV
                                    200 	.globl _g_RG3SAV
                                    201 	.globl _g_RG2SAV
                                    202 	.globl _g_RG1SAV
                                    203 	.globl _g_RG0SAV
                                    204 	.globl _g_CNSDFG
                                    205 	.globl _g_USRTAB
                                    206 	.globl _g_CLPRIM
                                    207 	.globl _g_WRPRIM
                                    208 	.globl _g_RDPRIM
                                    209 	.globl _Scroll_Initialize
                                    210 	.globl _Scroll_SetOffsetH
                                    211 	.globl _Scroll_SetOffsetV
                                    212 	.globl _Scroll_HBlankAdjust
                                    213 	.globl _Scroll_Update
                                    214 ;--------------------------------------------------------
                                    215 ; special function registers
                                    216 ;--------------------------------------------------------
                                    217 ;--------------------------------------------------------
                                    218 ; ram data
                                    219 ;--------------------------------------------------------
                                    220 	.area _DATA
                         0000F3AE   221 _g_LINL40	=	0xf3ae
                         0000F3AF   222 _g_LINL32	=	0xf3af
                         0000F3B0   223 _g_LINLEN	=	0xf3b0
                         0000F3B1   224 _g_CRTCNT	=	0xf3b1
                         0000F3B2   225 _g_CLMLST	=	0xf3b2
                         0000F3B3   226 _g_TXTNAM	=	0xf3b3
                         0000F3B5   227 _g_TXTCOL	=	0xf3b5
                         0000F3B7   228 _g_TXTCGP	=	0xf3b7
                         0000F3B9   229 _g_TXTATR	=	0xf3b9
                         0000F3BB   230 _g_TXTPAT	=	0xf3bb
                         0000F3BD   231 _g_T32NAM	=	0xf3bd
                         0000F3BF   232 _g_T32COL	=	0xf3bf
                         0000F3C1   233 _g_T32CGP	=	0xf3c1
                         0000F3C3   234 _g_T32ATR	=	0xf3c3
                         0000F3C5   235 _g_T32PAT	=	0xf3c5
                         0000F3C7   236 _g_GRPNAM	=	0xf3c7
                         0000F3C9   237 _g_GRPCOL	=	0xf3c9
                         0000F3CB   238 _g_GRPCGP	=	0xf3cb
                         0000F3CD   239 _g_GRPATR	=	0xf3cd
                         0000F3CF   240 _g_GRPPAT	=	0xf3cf
                         0000F3D1   241 _g_MLTNAM	=	0xf3d1
                         0000F3D3   242 _g_MLTCOL	=	0xf3d3
                         0000F3D5   243 _g_MLTCGP	=	0xf3d5
                         0000F3D7   244 _g_MLTATR	=	0xf3d7
                         0000F3D9   245 _g_MLTPAT	=	0xf3d9
                         0000F3DB   246 _g_CLIKSW	=	0xf3db
                         0000F3DC   247 _g_CSRY	=	0xf3dc
                         0000F3DD   248 _g_CSRX	=	0xf3dd
                         0000F3E9   249 _g_FORCLR	=	0xf3e9
                         0000F3EA   250 _g_BAKCLR	=	0xf3ea
                         0000F3EB   251 _g_BDRCLR	=	0xf3eb
                         0000F3F2   252 _g_ATRBYT	=	0xf3f2
                         0000F87F   253 _g_FNKSTR	=	0xf87f
                         0000F92A   254 _g_CLOC	=	0xf92a
                         0000F92C   255 _g_CMASK	=	0xf92c
                         0000FB02   256 _g_LOGOPR	=	0xfb02
                         0000FCB7   257 _g_GRPACX	=	0xfcb7
                         0000FCB9   258 _g_GRPACY	=	0xfcb9
                         0000FFFF   259 _g_SLTSL	=	0xffff
    00000000                        260 _g_Scroll_Map::
    00000000                        261 	.ds 2
    00000002                        262 _g_Scroll_OffsetX::
    00000002                        263 	.ds 2
    00000004                        264 _g_Scroll_TileX::
    00000004                        265 	.ds 1
    00000005                        266 _g_Scroll_OffsetY::
    00000005                        267 	.ds 2
    00000007                        268 _g_Scroll_TileY::
    00000007                        269 	.ds 1
    00000008                        270 _g_Scroll_Adjust::
    00000008                        271 	.ds 1
                                    272 ;--------------------------------------------------------
                                    273 ; ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area _INITIALIZED
                                    276 ;--------------------------------------------------------
                                    277 ; absolute external ram data
                                    278 ;--------------------------------------------------------
                                    279 	.area _DABS (ABS)
                                    280 ;--------------------------------------------------------
                                    281 ; global & static initialisations
                                    282 ;--------------------------------------------------------
                                    283 	.area _HOME
                                    284 	.area _GSINIT
                                    285 	.area _GSFINAL
                                    286 	.area _GSINIT
                                    287 ;--------------------------------------------------------
                                    288 ; Home
                                    289 ;--------------------------------------------------------
                                    290 	.area _HOME
                                    291 	.area _HOME
                                    292 ;--------------------------------------------------------
                                    293 ; code
                                    294 ;--------------------------------------------------------
                                    295 	.area _CODE
                                    296 ;F:\www\light\MSXgl\engine/src/scroll.c:50: u8 Scroll_Initialize(u16 map)
                                    297 ;	---------------------------------
                                    298 ; Function Scroll_Initialize
                                    299 ; ---------------------------------
    00000000                        300 _Scroll_Initialize::
    00000000 22r00r00         [16]  301 	ld	(_g_Scroll_Map), hl
                                    302 ;F:\www\light\MSXgl\engine/src/scroll.c:55: g_Scroll_OffsetX = 0;
    00000003 21 00 00         [10]  303 	ld	hl, #0x0000
    00000006 22r02r00         [16]  304 	ld	(_g_Scroll_OffsetX), hl
                                    305 ;F:\www\light\MSXgl\engine/src/scroll.c:56: g_Scroll_TileX = 0xFF;
    00000009 3E FF            [ 7]  306 	ld	a, #0xff
    0000000B 32r04r00         [13]  307 	ld	(#_g_Scroll_TileX), a
                                    308 ;F:\www\light\MSXgl\engine/src/scroll.c:60: g_Scroll_OffsetY = 0;
    0000000E 22r05r00         [16]  309 	ld	(_g_Scroll_OffsetY), hl
                                    310 ;F:\www\light\MSXgl\engine/src/scroll.c:61: g_Scroll_TileY = 0xFF;
    00000011 21r07r00         [10]  311 	ld	hl, #_g_Scroll_TileY
    00000014 36 FF            [10]  312 	ld	(hl), #0xff
                                    313 ;F:\www\light\MSXgl\engine/src/scroll.c:65: g_Scroll_Adjust = 0;
    00000016 21r08r00         [10]  314 	ld	hl, #_g_Scroll_Adjust
    00000019 36 00            [10]  315 	ld	(hl), #0x00
                                    316 ;F:\www\light\MSXgl\engine/src/vdp.h:734: inline void VDP_EnableSprite(u8 enable) { VDP_RegWriteBakMask(8, (u8)~R08_SPD, !enable ? R08_SPD : 0); }
    0000001B AF               [ 4]  317 	xor	a, a
    0000001C F5               [11]  318 	push	af
    0000001D 33               [ 6]  319 	inc	sp
    0000001E 2E FD            [ 7]  320 	ld	l, #0xfd
                                    321 ;	spillPairReg hl
                                    322 ;	spillPairReg hl
    00000020 3E 08            [ 7]  323 	ld	a, #0x08
    00000022 CDr00r00         [17]  324 	call	_VDP_RegWriteBakMask
                                    325 ;F:\www\light\MSXgl\engine/src/vdp.h:1078: inline void VDP_SetSpriteFlag(u8 flag) { VDP_RegWriteBakMask(1, (u8)~(R01_ST|R01_MAG), flag); }
    00000025 3E 03            [ 7]  326 	ld	a, #0x03
    00000027 F5               [11]  327 	push	af
    00000028 33               [ 6]  328 	inc	sp
    00000029 2E FC            [ 7]  329 	ld	l, #0xfc
                                    330 ;	spillPairReg hl
                                    331 ;	spillPairReg hl
    0000002B 3E 01            [ 7]  332 	ld	a, #0x01
    0000002D CDr00r00         [17]  333 	call	_VDP_RegWriteBakMask
                                    334 ;F:\www\light\MSXgl\engine/src/scroll.c:74: VDP_FillVRAM(0xFF, g_SpritePatternLow + (SCROLL_MASK_PATTERN * 4), g_SpritePatternHigh, 8 * 4);
    00000030 21 20 00         [10]  335 	ld	hl, #0x0020
    00000033 E5               [11]  336 	push	hl
    00000034 3Ar00r00         [13]  337 	ld	a, (_g_SpritePatternHigh+0)
    00000037 F5               [11]  338 	push	af
    00000038 33               [ 6]  339 	inc	sp
    00000039 ED 5Br00r00      [20]  340 	ld	de, (_g_SpritePatternLow)
    0000003D 3E FF            [ 7]  341 	ld	a, #0xff
    0000003F CDr00r00         [17]  342 	call	_VDP_FillVRAM_128K
                                    343 ;F:\www\light\MSXgl\engine/src/scroll.c:76: u8 y = (SCROLL_DST_Y) * 8 - 1;
                                    344 ;F:\www\light\MSXgl\engine/src/scroll.c:77: for(u8 i = 0; i < (SCROLL_DST_H + 3) / 4; ++i)
    00000042 01 00 0F         [10]  345 	ld	bc, #0xf00
    00000045 1E 00            [ 7]  346 	ld	e, #0x00
    00000047                        347 00106$:
    00000047 7B               [ 4]  348 	ld	a, e
    00000048 D6 05            [ 7]  349 	sub	a, #0x05
    0000004A 30 1A            [12]  350 	jr	NC, 00101$
                                    351 ;F:\www\light\MSXgl\engine/src/scroll.c:79: VDP_SetSpriteExUniColor(sprtId++, 0, y, 0, (u8)(SCROLL_MASK_COLOR + VDP_SPRITE_EC));
    0000004C 51               [ 4]  352 	ld	d, c
    0000004D 0C               [ 4]  353 	inc	c
    0000004E C5               [11]  354 	push	bc
    0000004F D5               [11]  355 	push	de
    00000050 21 00 81         [10]  356 	ld	hl, #0x8100
    00000053 E5               [11]  357 	push	hl
    00000054 C5               [11]  358 	push	bc
    00000055 33               [ 6]  359 	inc	sp
    00000056 2E 00            [ 7]  360 	ld	l, #0x00
                                    361 ;	spillPairReg hl
                                    362 ;	spillPairReg hl
    00000058 7A               [ 4]  363 	ld	a, d
    00000059 CDr00r00         [17]  364 	call	_VDP_SetSpriteExUniColor
    0000005C D1               [10]  365 	pop	de
    0000005D C1               [10]  366 	pop	bc
                                    367 ;F:\www\light\MSXgl\engine/src/scroll.c:80: y += 32;
    0000005E 78               [ 4]  368 	ld	a, b
    0000005F C6 20            [ 7]  369 	add	a, #0x20
    00000061 47               [ 4]  370 	ld	b, a
                                    371 ;F:\www\light\MSXgl\engine/src/scroll.c:77: for(u8 i = 0; i < (SCROLL_DST_H + 3) / 4; ++i)
    00000062 1C               [ 4]  372 	inc	e
    00000063 C3r47r00         [10]  373 	jp	00106$
    00000066                        374 00101$:
                                    375 ;F:\www\light\MSXgl\engine/src/scroll.c:82: y = (SCROLL_DST_Y) * 8 - 1;
    00000066 06 0F            [ 7]  376 	ld	b, #0x0f
                                    377 ;F:\www\light\MSXgl\engine/src/scroll.c:83: for(u8 i = 0; i < (SCROLL_DST_H + 3) / 4; ++i)
    00000068 1E 00            [ 7]  378 	ld	e, #0x00
    0000006A                        379 00109$:
    0000006A 7B               [ 4]  380 	ld	a, e
    0000006B D6 05            [ 7]  381 	sub	a, #0x05
    0000006D 30 1A            [12]  382 	jr	NC, 00102$
                                    383 ;F:\www\light\MSXgl\engine/src/scroll.c:85: VDP_SetSpriteExUniColor(sprtId++, 0, y, 0, SCROLL_MASK_COLOR);
    0000006F 51               [ 4]  384 	ld	d, c
    00000070 0C               [ 4]  385 	inc	c
    00000071 C5               [11]  386 	push	bc
    00000072 D5               [11]  387 	push	de
    00000073 21 00 01         [10]  388 	ld	hl, #0x100
    00000076 E5               [11]  389 	push	hl
    00000077 C5               [11]  390 	push	bc
    00000078 33               [ 6]  391 	inc	sp
    00000079 2E 00            [ 7]  392 	ld	l, #0x00
                                    393 ;	spillPairReg hl
                                    394 ;	spillPairReg hl
    0000007B 7A               [ 4]  395 	ld	a, d
    0000007C CDr00r00         [17]  396 	call	_VDP_SetSpriteExUniColor
    0000007F D1               [10]  397 	pop	de
    00000080 C1               [10]  398 	pop	bc
                                    399 ;F:\www\light\MSXgl\engine/src/scroll.c:86: y += 32;
    00000081 78               [ 4]  400 	ld	a, b
    00000082 C6 20            [ 7]  401 	add	a, #0x20
    00000084 47               [ 4]  402 	ld	b, a
                                    403 ;F:\www\light\MSXgl\engine/src/scroll.c:83: for(u8 i = 0; i < (SCROLL_DST_H + 3) / 4; ++i)
    00000085 1C               [ 4]  404 	inc	e
    00000086 C3r6Ar00         [10]  405 	jp	00109$
    00000089                        406 00102$:
                                    407 ;F:\www\light\MSXgl\engine/src/scroll.c:88: VDP_DisableSpritesFrom(sprtId);
    00000089 C5               [11]  408 	push	bc
    0000008A 79               [ 4]  409 	ld	a, c
    0000008B CDr00r00         [17]  410 	call	_VDP_DisableSpritesFrom
    0000008E C1               [10]  411 	pop	bc
                                    412 ;F:\www\light\MSXgl\engine/src/scroll.c:91: return sprtId;
    0000008F 79               [ 4]  413 	ld	a, c
                                    414 ;F:\www\light\MSXgl\engine/src/scroll.c:92: }
    00000090 C9               [10]  415 	ret
                         0000F380   416 _g_RDPRIM	=	0xf380
                         0000F385   417 _g_WRPRIM	=	0xf385
                         0000F38C   418 _g_CLPRIM	=	0xf38c
                         0000F39A   419 _g_USRTAB	=	0xf39a
                         0000F3DE   420 _g_CNSDFG	=	0xf3de
                         0000F3DF   421 _g_RG0SAV	=	0xf3df
                         0000F3E0   422 _g_RG1SAV	=	0xf3e0
                         0000F3E1   423 _g_RG2SAV	=	0xf3e1
                         0000F3E2   424 _g_RG3SAV	=	0xf3e2
                         0000F3E3   425 _g_RG4SAV	=	0xf3e3
                         0000F3E4   426 _g_RG5SAV	=	0xf3e4
                         0000F3E5   427 _g_RG6SAV	=	0xf3e5
                         0000F3E6   428 _g_RG7SAV	=	0xf3e6
                         0000F3E7   429 _g_STATFL	=	0xf3e7
                         0000F3E8   430 _g_TRGFLG	=	0xf3e8
                         0000F3EC   431 _g_MAXUPD	=	0xf3ec
                         0000F3EF   432 _g_MINUPD	=	0xf3ef
                         0000F3F3   433 _g_QUEUES	=	0xf3f3
                         0000F3F5   434 _g_FRCNEW	=	0xf3f5
                         0000F3F6   435 _g_SCNCNT	=	0xf3f6
                         0000F3F7   436 _g_REPCNT	=	0xf3f7
                         0000F3F8   437 _g_PUTPNT	=	0xf3f8
                         0000F3FA   438 _g_GETPNT	=	0xf3fa
                         0000F3FC   439 _g_CS120	=	0xf3fc
                         0000F401   440 _g_CS240	=	0xf401
                         0000F406   441 _g_LOW	=	0xf406
                         0000F408   442 _g_HIGH	=	0xf408
                         0000F40A   443 _g_HEADER	=	0xf40a
                         0000F40B   444 _g_ASPCT1	=	0xf40b
                         0000F40D   445 _g_ASPCT2	=	0xf40d
                         0000F959   446 _g_QUETAB	=	0xf959
                         0000F971   447 _g_QUEBAK	=	0xf971
                         0000F975   448 _g_VOICAQ	=	0xf975
                         0000F9F5   449 _g_VOICBQ	=	0xf9f5
                         0000FA75   450 _g_VOICCQ	=	0xfa75
                         0000FAF5   451 _g_RS2IQ	=	0xfaf5
                         0000FAF5   452 _g_DPPAGE	=	0xfaf5
                         0000FAF6   453 _g_ACPAGE	=	0xfaf6
                         0000FAF7   454 _g_AVCSAV	=	0xfaf7
                         0000FAF8   455 _g_EXBRSA	=	0xfaf8
                         0000FAF9   456 _g_CHRCNT	=	0xfaf9
                         0000FAFA   457 _g_ROMA	=	0xfafa
                         0000FAFC   458 _g_MODE	=	0xfafc
                         0000FAFD   459 _g_NORUSE	=	0xfafd
                         0000FAFE   460 _g_XSAVE	=	0xfafe
                         0000FB00   461 _g_YSAVE	=	0xfb00
                         0000FB03   462 _g_RSTMP	=	0xfb03
                         0000FB03   463 _g_TOCNT	=	0xfb03
                         0000FB04   464 _g_RSFCB	=	0xfb04
                         0000FB06   465 _g_RSIQLN	=	0xfb06
                         0000FB07   466 _g_MEXBIh	=	0xfb07
                         0000FB0C   467 _g_OLDSTT	=	0xfb0c
                         0000FB0C   468 _g_OLDINT	=	0xfb0c
                         0000FB16   469 _g_DEVNUM	=	0xfb16
                         0000FB17   470 _g_DATCNT	=	0xfb17
                         0000FB1A   471 _g_ERRORS	=	0xfb1a
                         0000FB1B   472 _g_FLAGS	=	0xfb1b
                         0000FB1C   473 _g_ESTBLS	=	0xfb1c
                         0000FB1D   474 _g_COMMSK	=	0xfb1d
                         0000FB1E   475 _g_LSTCOM	=	0xfb1e
                         0000FB1F   476 _g_LSTMOD	=	0xfb1f
                         0000FB35   477 _g_PRSCNT	=	0xfb35
                         0000FB36   478 _g_SAVSP	=	0xfb36
                         0000FB38   479 _g_VOICEN	=	0xfb38
                         0000FB39   480 _g_SAVVOL	=	0xfb39
                         0000FB3B   481 _g_MCLLEN	=	0xfb3b
                         0000FB3C   482 _g_MCLPTR	=	0xfb3c
                         0000FB3E   483 _g_QUEUEN	=	0xfb3e
                         0000FB3F   484 _g_MUSICF	=	0xfb3f
                         0000FB40   485 _g_PLYCNT	=	0xfb40
                         0000FB41   486 _g_VCBA	=	0xfb41
                         0000FB66   487 _g_VCBB	=	0xfb66
                         0000FB8B   488 _g_VCBC	=	0xfb8b
                         0000FBB0   489 _g_ENSTOP	=	0xfbb0
                         0000FBB1   490 _g_BASROM	=	0xfbb1
                         0000FBB2   491 _g_LINTTB	=	0xfbb2
                         0000FBCA   492 _g_FSTPOS	=	0xfbca
                         0000FBCC   493 _g_CODSAV	=	0xfbcc
                         0000FBCD   494 _g_FNKSWI	=	0xfbcd
                         0000FBCE   495 _g_FNKFLG	=	0xfbce
                         0000FBD8   496 _g_ONGSBF	=	0xfbd8
                         0000FBD9   497 _g_CLIKFL	=	0xfbd9
                         0000FBDA   498 _g_OLDKEY	=	0xfbda
                         0000FBE5   499 _g_NEWKEY	=	0xfbe5
                         0000FBF0   500 _g_KEYBUF	=	0xfbf0
                         0000FC18   501 _g_LINWRK	=	0xfc18
                         0000FC40   502 _g_PATWRK	=	0xfc40
                         0000FC48   503 _g_BOTTOM	=	0xfc48
                         0000FC4A   504 _g_HIMEM	=	0xfc4a
                         0000FC4C   505 _g_TRPTBL	=	0xfc4c
                         0000FC9A   506 _g_RTYCNT	=	0xfc9a
                         0000FC9B   507 _g_INTFLG	=	0xfc9b
                         0000FC9C   508 _g_PADY	=	0xfc9c
                         0000FC9D   509 _g_PADX	=	0xfc9d
                         0000FC9E   510 _g_JIFFY	=	0xfc9e
                         0000FCA0   511 _g_INTVAL	=	0xfca0
                         0000FCA2   512 _g_INTCNT	=	0xfca2
                         0000FCA4   513 _g_LOWLIM	=	0xfca4
                         0000FCA5   514 _g_WINWID	=	0xfca5
                         0000FCA6   515 _g_GRPHED	=	0xfca6
                         0000FCA7   516 _g_ESCCNT	=	0xfca7
                         0000FCA8   517 _g_INSFLG	=	0xfca8
                         0000FCA9   518 _g_CSRSW	=	0xfca9
                         0000FCAA   519 _g_CSTYLE	=	0xfcaa
                         0000FCAB   520 _g_CAPST	=	0xfcab
                         0000FCAC   521 _g_KANAST	=	0xfcac
                         0000FCAD   522 _g_KANAMD	=	0xfcad
                         0000FCAE   523 _g_FLBMEM	=	0xfcae
                         0000FCAF   524 _g_SCRMOD	=	0xfcaf
                         0000FCB0   525 _g_OLDSCR	=	0xfcb0
                         0000FCB1   526 _g_CASPRV	=	0xfcb1
                         0000FCB2   527 _g_BRDATR	=	0xfcb2
                         0000FCB3   528 _g_GXPOS	=	0xfcb3
                         0000FCB5   529 _g_GYPOS	=	0xfcb5
                         0000FCBB   530 _g_DRWFLG	=	0xfcbb
                         0000FCBC   531 _g_DRWSCL	=	0xfcbc
                         0000FCBD   532 _g_DRWANG	=	0xfcbd
                         0000FCC1   533 _g_MNROM	=	0xfcc1
                         0000FCC1   534 _g_EXPTBL	=	0xfcc1
                         0000FCC5   535 _g_SLTTBL	=	0xfcc5
                         0000FCC9   536 _g_SLTATR	=	0xfcc9
                         0000FD09   537 _g_SLTWRK	=	0xfd09
                         0000FD89   538 _g_PROCNM	=	0xfd89
                         0000FFE7   539 _g_RG08SAV	=	0xffe7
                         0000FFE8   540 _g_RG09SAV	=	0xffe8
                         0000FFE9   541 _g_RG10SAV	=	0xffe9
                         0000FFEA   542 _g_RG11SAV	=	0xffea
                         0000FFEB   543 _g_RG12SAV	=	0xffeb
                         0000FFEC   544 _g_RG13SAV	=	0xffec
                         0000FFED   545 _g_RG14SAV	=	0xffed
                         0000FFEE   546 _g_RG15SAV	=	0xffee
                         0000FFEF   547 _g_RG16SAV	=	0xffef
                         0000FFF0   548 _g_RG17SAV	=	0xfff0
                         0000FFF1   549 _g_RG18SAV	=	0xfff1
                         0000FFF2   550 _g_RG19SAV	=	0xfff2
                         0000FFF3   551 _g_RG20SAV	=	0xfff3
                         0000FFF4   552 _g_RG21SAV	=	0xfff4
                         0000FFF5   553 _g_RG22SAV	=	0xfff5
                         0000FFF6   554 _g_RG23SAV	=	0xfff6
                         0000FFF7   555 _g_MINROM	=	0xfff7
                         0000FFF8   556 _g_SVFFF8	=	0xfff8
                         0000FFFA   557 _g_RG25SAV	=	0xfffa
                         0000FFFB   558 _g_RG26SAV	=	0xfffb
                         0000FFFC   559 _g_RG27SAV	=	0xfffc
                         0000FFFD   560 _g_SVFFFD	=	0xfffd
                                    561 ;F:\www\light\MSXgl\engine/src/scroll.c:97: void Scroll_SetOffsetH(i8 offset)
                                    562 ;	---------------------------------
                                    563 ; Function Scroll_SetOffsetH
                                    564 ; ---------------------------------
    00000091                        565 _Scroll_SetOffsetH::
                                    566 ;	spillPairReg hl
                                    567 ;	spillPairReg hl
                                    568 ;F:\www\light\MSXgl\engine/src/scroll.c:102: g_Scroll_OffsetX += offset;
    00000091 6F               [ 4]  569 	ld	l, a
    00000092 4F               [ 4]  570 	ld	c, a
    00000093 07               [ 4]  571 	rlca
    00000094 9F               [ 4]  572 	sbc	a, a
    00000095 47               [ 4]  573 	ld	b, a
    00000096 ED 5Br02r00      [20]  574 	ld	de, (_g_Scroll_OffsetX)
                                    575 ;F:\www\light\MSXgl\engine/src/scroll.c:99: if(offset > 0)
    0000009A AF               [ 4]  576 	xor	a, a
    0000009B 95               [ 4]  577 	sub	a, l
    0000009C E2rA1r00         [10]  578 	jp	PO, 00126$
    0000009F EE 80            [ 7]  579 	xor	a, #0x80
    000000A1                        580 00126$:
    000000A1 F2rB7r00         [10]  581 	jp	P, 00107$
                                    582 ;F:\www\light\MSXgl\engine/src/scroll.c:102: g_Scroll_OffsetX += offset;
    000000A4 69               [ 4]  583 	ld	l, c
                                    584 ;	spillPairReg hl
                                    585 ;	spillPairReg hl
    000000A5 60               [ 4]  586 	ld	h, b
                                    587 ;	spillPairReg hl
                                    588 ;	spillPairReg hl
    000000A6 19               [11]  589 	add	hl, de
                                    590 ;F:\www\light\MSXgl\engine/src/scroll.c:103: if(g_Scroll_OffsetX >= ((SCROLL_SRC_W) * 8))
    000000A7 22r02r00         [16]  591 	ld	(_g_Scroll_OffsetX), hl
    000000AA 7C               [ 4]  592 	ld	a, h
    000000AB D6 04            [ 7]  593 	sub	a, #0x04
    000000AD D8               [11]  594 	ret	C
                                    595 ;F:\www\light\MSXgl\engine/src/scroll.c:104: g_Scroll_OffsetX += offset - ((SCROLL_SRC_W) * 8);
    000000AE 78               [ 4]  596 	ld	a,b
    000000AF C6 FC            [ 7]  597 	add	a,#0xfc
    000000B1 47               [ 4]  598 	ld	b, a
    000000B2 09               [11]  599 	add	hl, bc
    000000B3 22r02r00         [16]  600 	ld	(_g_Scroll_OffsetX), hl
    000000B6 C9               [10]  601 	ret
    000000B7                        602 00107$:
                                    603 ;F:\www\light\MSXgl\engine/src/scroll.c:115: if(g_Scroll_OffsetX > -offset)
    000000B7 AF               [ 4]  604 	xor	a, a
    000000B8 91               [ 4]  605 	sub	a, c
    000000B9 6F               [ 4]  606 	ld	l, a
                                    607 ;	spillPairReg hl
                                    608 ;	spillPairReg hl
    000000BA 9F               [ 4]  609 	sbc	a, a
    000000BB 90               [ 4]  610 	sub	a, b
    000000BC 67               [ 4]  611 	ld	h, a
                                    612 ;	spillPairReg hl
                                    613 ;	spillPairReg hl
    000000BD AF               [ 4]  614 	xor	a, a
    000000BE ED 52            [15]  615 	sbc	hl, de
    000000C0 30 07            [12]  616 	jr	NC, 00104$
                                    617 ;F:\www\light\MSXgl\engine/src/scroll.c:116: g_Scroll_OffsetX += offset;
    000000C2 69               [ 4]  618 	ld	l, c
    000000C3 60               [ 4]  619 	ld	h, b
    000000C4 19               [11]  620 	add	hl, de
    000000C5 22r02r00         [16]  621 	ld	(_g_Scroll_OffsetX), hl
    000000C8 C9               [10]  622 	ret
    000000C9                        623 00104$:
                                    624 ;F:\www\light\MSXgl\engine/src/scroll.c:118: g_Scroll_OffsetX += offset + ((SCROLL_SRC_W) * 8);
    000000C9 21 00 04         [10]  625 	ld	hl, #0x0400
    000000CC 09               [11]  626 	add	hl, bc
    000000CD 19               [11]  627 	add	hl, de
    000000CE 22r02r00         [16]  628 	ld	(_g_Scroll_OffsetX), hl
                                    629 ;F:\www\light\MSXgl\engine/src/scroll.c:126: }
    000000D1 C9               [10]  630 	ret
                                    631 ;F:\www\light\MSXgl\engine/src/scroll.c:132: void Scroll_SetOffsetV(i8 offset)
                                    632 ;	---------------------------------
                                    633 ; Function Scroll_SetOffsetV
                                    634 ; ---------------------------------
    000000D2                        635 _Scroll_SetOffsetV::
                                    636 ;F:\www\light\MSXgl\engine/src/scroll.c:136: if(g_Scroll_OffsetY + offset < ((SCROLL_SRC_H) - (SCROLL_DST_H)) * 8)
    000000D2 5F               [ 4]  637 	ld	e, a
    000000D3 4F               [ 4]  638 	ld	c, a
    000000D4 07               [ 4]  639 	rlca
    000000D5 9F               [ 4]  640 	sbc	a, a
    000000D6 47               [ 4]  641 	ld	b, a
    000000D7 2Ar05r00         [16]  642 	ld	hl, (_g_Scroll_OffsetY)
                                    643 ;F:\www\light\MSXgl\engine/src/scroll.c:134: if(offset > 0)
    000000DA AF               [ 4]  644 	xor	a, a
    000000DB 93               [ 4]  645 	sub	a, e
    000000DC E2rE1r00         [10]  646 	jp	PO, 00127$
    000000DF EE 80            [ 7]  647 	xor	a, #0x80
    000000E1                        648 00127$:
    000000E1 F2rF8r00         [10]  649 	jp	P, 00108$
                                    650 ;F:\www\light\MSXgl\engine/src/scroll.c:136: if(g_Scroll_OffsetY + offset < ((SCROLL_SRC_H) - (SCROLL_DST_H)) * 8)
    000000E4 09               [11]  651 	add	hl, bc
    000000E5 7D               [ 4]  652 	ld	a, l
    000000E6 D6 20            [ 7]  653 	sub	a, #0x20
    000000E8 7C               [ 4]  654 	ld	a, h
    000000E9 DE 00            [ 7]  655 	sbc	a, #0x00
    000000EB 30 04            [12]  656 	jr	NC, 00102$
                                    657 ;F:\www\light\MSXgl\engine/src/scroll.c:137: g_Scroll_OffsetY += offset;
    000000ED 22r05r00         [16]  658 	ld	(_g_Scroll_OffsetY), hl
    000000F0 C9               [10]  659 	ret
    000000F1                        660 00102$:
                                    661 ;F:\www\light\MSXgl\engine/src/scroll.c:139: g_Scroll_OffsetY = ((SCROLL_SRC_H) - (SCROLL_DST_H)) * 8;
    000000F1 21 20 00         [10]  662 	ld	hl, #0x0020
    000000F4 22r05r00         [16]  663 	ld	(_g_Scroll_OffsetY), hl
    000000F7 C9               [10]  664 	ret
    000000F8                        665 00108$:
                                    666 ;F:\www\light\MSXgl\engine/src/scroll.c:143: if(g_Scroll_OffsetY > -offset)
    000000F8 AF               [ 4]  667 	xor	a, a
    000000F9 91               [ 4]  668 	sub	a, c
    000000FA 5F               [ 4]  669 	ld	e, a
    000000FB 9F               [ 4]  670 	sbc	a, a
    000000FC 90               [ 4]  671 	sub	a, b
    000000FD 57               [ 4]  672 	ld	d, a
    000000FE 7B               [ 4]  673 	ld	a, e
    000000FF 95               [ 4]  674 	sub	a, l
    00000100 7A               [ 4]  675 	ld	a, d
    00000101 9C               [ 4]  676 	sbc	a, h
    00000102 30 05            [12]  677 	jr	NC, 00105$
                                    678 ;F:\www\light\MSXgl\engine/src/scroll.c:144: g_Scroll_OffsetY += offset;
    00000104 09               [11]  679 	add	hl, bc
    00000105 22r05r00         [16]  680 	ld	(_g_Scroll_OffsetY), hl
    00000108 C9               [10]  681 	ret
    00000109                        682 00105$:
                                    683 ;F:\www\light\MSXgl\engine/src/scroll.c:146: g_Scroll_OffsetY = 0;
    00000109 21 00 00         [10]  684 	ld	hl, #0x0000
    0000010C 22r05r00         [16]  685 	ld	(_g_Scroll_OffsetY), hl
                                    686 ;F:\www\light\MSXgl\engine/src/scroll.c:148: }
    0000010F C9               [10]  687 	ret
                                    688 ;F:\www\light\MSXgl\engine/src/scroll.c:153: void Scroll_HBlankAdjust(u8 adjust)
                                    689 ;	---------------------------------
                                    690 ; Function Scroll_HBlankAdjust
                                    691 ; ---------------------------------
    00000110                        692 _Scroll_HBlankAdjust::
                                    693 ;F:\www\light\MSXgl\engine/src/scroll.c:155: switch(adjust)
    00000110 4F               [ 4]  694 	ld	c, a
    00000111 B7               [ 4]  695 	or	a, a
    00000112 28 06            [12]  696 	jr	Z, 00101$
    00000114 0D               [ 4]  697 	dec	c
    00000115 28 0A            [12]  698 	jr	Z, 00102$
    00000117 C3r2Er01         [10]  699 	jp	00103$
                                    700 ;F:\www\light\MSXgl\engine/src/scroll.c:157: case 0:
    0000011A                        701 00101$:
                                    702 ;F:\www\light\MSXgl\engine/src/vdp.h:759: inline void VDP_SetHBlankLine(u8 line) { VDP_RegWrite(19, line); }
    0000011A 2E 09            [ 7]  703 	ld	l, #0x09
                                    704 ;	spillPairReg hl
                                    705 ;	spillPairReg hl
                                    706 ;F:\www\light\MSXgl\engine/src/scroll.c:159: break;
    0000011C 3E 13            [ 7]  707 	ld	a, #0x13
    0000011E C3r00r00         [10]  708 	jp	_VDP_RegWrite
                                    709 ;F:\www\light\MSXgl\engine/src/scroll.c:160: case 1:
    00000121                        710 00102$:
                                    711 ;F:\www\light\MSXgl\engine/src/scroll.c:161: VDP_SetAdjustOffset(g_Scroll_Adjust);
    00000121 3Ar08r00         [13]  712 	ld	a, (_g_Scroll_Adjust+0)
    00000124 CDr00r00         [17]  713 	call	_VDP_SetAdjustOffset
                                    714 ;F:\www\light\MSXgl\engine/src/vdp.h:759: inline void VDP_SetHBlankLine(u8 line) { VDP_RegWrite(19, line); }
    00000127 2E AC            [ 7]  715 	ld	l, #0xac
                                    716 ;	spillPairReg hl
                                    717 ;	spillPairReg hl
                                    718 ;F:\www\light\MSXgl\engine/src/scroll.c:163: break;
    00000129 3E 13            [ 7]  719 	ld	a, #0x13
    0000012B C3r00r00         [10]  720 	jp	_VDP_RegWrite
                                    721 ;F:\www\light\MSXgl\engine/src/scroll.c:164: default:
    0000012E                        722 00103$:
                                    723 ;F:\www\light\MSXgl\engine/src/scroll.c:165: VDP_SetAdjustOffset(0);
    0000012E AF               [ 4]  724 	xor	a, a
                                    725 ;F:\www\light\MSXgl\engine/src/scroll.c:167: }
                                    726 ;F:\www\light\MSXgl\engine/src/scroll.c:168: }
    0000012F C3r00r00         [10]  727 	jp	_VDP_SetAdjustOffset
                                    728 ;F:\www\light\MSXgl\engine/src/scroll.c:173: void Scroll_Update()
                                    729 ;	---------------------------------
                                    730 ; Function Scroll_Update
                                    731 ; ---------------------------------
    00000132                        732 _Scroll_Update::
    00000132 DD E5            [15]  733 	push	ix
    00000134 DD 21 00 00      [14]  734 	ld	ix,#0
    00000138 DD 39            [15]  735 	add	ix,sp
    0000013A 21 F1 FF         [10]  736 	ld	hl, #-15
    0000013D 39               [11]  737 	add	hl, sp
    0000013E F9               [ 6]  738 	ld	sp, hl
                                    739 ;F:\www\light\MSXgl\engine/src/scroll.c:177: u8  offsetStepX = g_Scroll_OffsetX & 0x7;
    0000013F 3Ar02r00         [13]  740 	ld	a, (_g_Scroll_OffsetX+0)
    00000142 E6 07            [ 7]  741 	and	a, #0x07
    00000144 4F               [ 4]  742 	ld	c, a
                                    743 ;F:\www\light\MSXgl\engine/src/scroll.c:178: u16 offsetTileX = g_Scroll_OffsetX >> 3;
    00000145 3Ar02r00         [13]  744 	ld	a, (_g_Scroll_OffsetX+0)
    00000148 DD 77 F1         [19]  745 	ld	-15 (ix), a
    0000014B 3Ar03r00         [13]  746 	ld	a, (_g_Scroll_OffsetX+1)
    0000014E DD 77 F2         [19]  747 	ld	-14 (ix), a
    00000151 DD CB F2 3E      [23]  748 	srl	-14 (ix)
    00000155 DD CB F1 1E      [23]  749 	rr	-15 (ix)
    00000159 DD CB F2 3E      [23]  750 	srl	-14 (ix)
    0000015D DD CB F1 1E      [23]  751 	rr	-15 (ix)
    00000161 DD CB F2 3E      [23]  752 	srl	-14 (ix)
    00000165 DD CB F1 1E      [23]  753 	rr	-15 (ix)
                                    754 ;F:\www\light\MSXgl\engine/src/scroll.c:183: u8  offsetStepY = g_Scroll_OffsetY & 0x7;
    00000169 3Ar05r00         [13]  755 	ld	a, (_g_Scroll_OffsetY+0)
    0000016C E6 07            [ 7]  756 	and	a, #0x07
    0000016E 47               [ 4]  757 	ld	b, a
                                    758 ;F:\www\light\MSXgl\engine/src/scroll.c:184: u16 offsetTileY = g_Scroll_OffsetY >> 3;
    0000016F 3Ar05r00         [13]  759 	ld	a, (_g_Scroll_OffsetY+0)
    00000172 DD 77 FD         [19]  760 	ld	-3 (ix), a
    00000175 3Ar06r00         [13]  761 	ld	a, (_g_Scroll_OffsetY+1)
    00000178 DD 77 FE         [19]  762 	ld	-2 (ix), a
    0000017B DD CB FE 3E      [23]  763 	srl	-2 (ix)
    0000017F DD CB FD 1E      [23]  764 	rr	-3 (ix)
    00000183 DD CB FE 3E      [23]  765 	srl	-2 (ix)
    00000187 DD CB FD 1E      [23]  766 	rr	-3 (ix)
    0000018B DD CB FE 3E      [23]  767 	srl	-2 (ix)
    0000018F DD CB FD 1E      [23]  768 	rr	-3 (ix)
                                    769 ;F:\www\light\MSXgl\engine/src/scroll.c:191: g_Scroll_Adjust |= offsetStepX;
    00000193 79               [ 4]  770 	ld	a, c
    00000194 32r08r00         [13]  771 	ld	(#_g_Scroll_Adjust), a
                                    772 ;F:\www\light\MSXgl\engine/src/scroll.c:194: g_Scroll_Adjust |= offsetStepY << 4;
    00000197 78               [ 4]  773 	ld	a, b
    00000198 87               [ 4]  774 	add	a, a
    00000199 87               [ 4]  775 	add	a, a
    0000019A 87               [ 4]  776 	add	a, a
    0000019B 87               [ 4]  777 	add	a, a
    0000019C 47               [ 4]  778 	ld	b, a
    0000019D 3Ar08r00         [13]  779 	ld	a, (_g_Scroll_Adjust+0)
    000001A0 B0               [ 4]  780 	or	a, b
    000001A1 32r08r00         [13]  781 	ld	(_g_Scroll_Adjust+0), a
                                    782 ;F:\www\light\MSXgl\engine/src/scroll.c:205: for(u8 i = 0; i < (SCROLL_DST_H + 3) / 4; ++i)
    000001A4 1E 00            [ 7]  783 	ld	e, #0x00
    000001A6 DD 36 FF 00      [19]  784 	ld	-1 (ix), #0x00
    000001AA                        785 00111$:
    000001AA DD 7E FF         [19]  786 	ld	a, -1 (ix)
    000001AD D6 05            [ 7]  787 	sub	a, #0x05
    000001AF 30 11            [12]  788 	jr	NC, 00101$
                                    789 ;F:\www\light\MSXgl\engine/src/scroll.c:206: VDP_SetSpritePositionX(sprtId++, offsetStepX);
    000001B1 43               [ 4]  790 	ld	b, e
    000001B2 1C               [ 4]  791 	inc	e
    000001B3 C5               [11]  792 	push	bc
    000001B4 D5               [11]  793 	push	de
    000001B5 69               [ 4]  794 	ld	l, c
                                    795 ;	spillPairReg hl
                                    796 ;	spillPairReg hl
    000001B6 78               [ 4]  797 	ld	a, b
    000001B7 CDr00r00         [17]  798 	call	_VDP_SetSpritePositionX
    000001BA D1               [10]  799 	pop	de
    000001BB C1               [10]  800 	pop	bc
                                    801 ;F:\www\light\MSXgl\engine/src/scroll.c:205: for(u8 i = 0; i < (SCROLL_DST_H + 3) / 4; ++i)
    000001BC DD 34 FF         [23]  802 	inc	-1 (ix)
    000001BF C3rAAr01         [10]  803 	jp	00111$
    000001C2                        804 00101$:
                                    805 ;F:\www\light\MSXgl\engine/src/scroll.c:207: offsetStepX += (((SCROLL_DST_W) - 1) * 8);
    000001C2 79               [ 4]  806 	ld	a, c
    000001C3 C6 F8            [ 7]  807 	add	a, #0xf8
    000001C5 4F               [ 4]  808 	ld	c, a
                                    809 ;F:\www\light\MSXgl\engine/src/scroll.c:208: for(u8 i = 0; i < (SCROLL_DST_H + 3) / 4; ++i)
    000001C6 06 00            [ 7]  810 	ld	b, #0x00
    000001C8                        811 00114$:
    000001C8 78               [ 4]  812 	ld	a, b
    000001C9 D6 05            [ 7]  813 	sub	a, #0x05
    000001CB 30 0F            [12]  814 	jr	NC, 00102$
                                    815 ;F:\www\light\MSXgl\engine/src/scroll.c:209: VDP_SetSpritePositionX(sprtId++, offsetStepX);
    000001CD 53               [ 4]  816 	ld	d, e
    000001CE 1C               [ 4]  817 	inc	e
    000001CF C5               [11]  818 	push	bc
    000001D0 D5               [11]  819 	push	de
    000001D1 69               [ 4]  820 	ld	l, c
                                    821 ;	spillPairReg hl
                                    822 ;	spillPairReg hl
    000001D2 7A               [ 4]  823 	ld	a, d
    000001D3 CDr00r00         [17]  824 	call	_VDP_SetSpritePositionX
    000001D6 D1               [10]  825 	pop	de
    000001D7 C1               [10]  826 	pop	bc
                                    827 ;F:\www\light\MSXgl\engine/src/scroll.c:208: for(u8 i = 0; i < (SCROLL_DST_H + 3) / 4; ++i)
    000001D8 04               [ 4]  828 	inc	b
    000001D9 C3rC8r01         [10]  829 	jp	00114$
    000001DC                        830 00102$:
                                    831 ;F:\www\light\MSXgl\engine/src/scroll.c:214: if((offsetTileX == g_Scroll_TileX) && (offsetTileY == g_Scroll_TileY))
    000001DC 3Ar04r00         [13]  832 	ld	a, (_g_Scroll_TileX+0)
    000001DF 4F               [ 4]  833 	ld	c, a
    000001E0 06 00            [ 7]  834 	ld	b, #0x00
    000001E2 E1               [10]  835 	pop	hl
    000001E3 E5               [11]  836 	push	hl
    000001E4 BF               [ 4]  837 	cp	a, a
    000001E5 ED 42            [15]  838 	sbc	hl, bc
    000001E7 20 15            [12]  839 	jr	NZ, 00104$
    000001E9 3Ar07r00         [13]  840 	ld	a, (_g_Scroll_TileY+0)
    000001EC 4F               [ 4]  841 	ld	c, a
    000001ED 06 00            [ 7]  842 	ld	b, #0x00
    000001EF DD 6E FD         [19]  843 	ld	l, -3 (ix)
    000001F2 DD 66 FE         [19]  844 	ld	h, -2 (ix)
    000001F5 BF               [ 4]  845 	cp	a, a
    000001F6 ED 42            [15]  846 	sbc	hl, bc
    000001F8 CArF5r02         [10]  847 	jp	Z,00119$
                                    848 ;F:\www\light\MSXgl\engine/src/scroll.c:215: return;
    000001FB C3rFEr01         [10]  849 	jp	00104$
    000001FE                        850 00104$:
                                    851 ;F:\www\light\MSXgl\engine/src/scroll.c:225: g_Scroll_TileX = offsetTileX;
    000001FE DD 7E F1         [19]  852 	ld	a, -15 (ix)
    00000201 32r04r00         [13]  853 	ld	(_g_Scroll_TileX+0), a
                                    854 ;F:\www\light\MSXgl\engine/src/scroll.c:232: g_Scroll_TileY = offsetTileY;
    00000204 DD 7E FD         [19]  855 	ld	a, -3 (ix)
    00000207 32r07r00         [13]  856 	ld	(_g_Scroll_TileY+0), a
                                    857 ;F:\www\light\MSXgl\engine/src/scroll.c:239: u16 src = (u16)g_Scroll_Map + ((SCROLL_SRC_Y) * (SCROLL_SRC_W)) + (TILE_Y * (SCROLL_SRC_W)) + TILE_X;
    0000020A DD 4E FD         [19]  858 	ld	c, -3 (ix)
    0000020D AF               [ 4]  859 	xor	a, a
    0000020E CB 1F            [ 8]  860 	rr	a
    00000210 41               [ 4]  861 	ld	b, c
    00000211 CB 18            [ 8]  862 	rr	b
    00000213 1F               [ 4]  863 	rra
    00000214 4F               [ 4]  864 	ld	c, a
    00000215 2Ar00r00         [16]  865 	ld	hl, (_g_Scroll_Map)
    00000218 09               [11]  866 	add	hl, bc
    00000219 D1               [10]  867 	pop	de
    0000021A D5               [11]  868 	push	de
    0000021B 19               [11]  869 	add	hl, de
    0000021C DD 75 F3         [19]  870 	ld	-13 (ix), l
    0000021F DD 74 F4         [19]  871 	ld	-12 (ix), h
                                    872 ;F:\www\light\MSXgl\engine/src/scroll.c:240: u16 dst = g_ScreenLayoutLow + ((SCROLL_DST_Y) * SCROLL_SCREEN_W) + (SCROLL_DST_X);
    00000222 2Ar00r00         [16]  873 	ld	hl, (_g_ScreenLayoutLow)
    00000225 01 40 00         [10]  874 	ld	bc, #0x0040
    00000228 09               [11]  875 	add	hl, bc
    00000229 DD 75 F5         [19]  876 	ld	-11 (ix), l
    0000022C DD 74 F6         [19]  877 	ld	-10 (ix), h
                                    878 ;F:\www\light\MSXgl\engine/src/scroll.c:241: u16 sw = (SCROLL_SRC_W) - TILE_X;
    0000022F 3E 80            [ 7]  879 	ld	a, #0x80
    00000231 DD 96 F1         [19]  880 	sub	a, -15 (ix)
    00000234 DD 77 F7         [19]  881 	ld	-9 (ix), a
    00000237 9F               [ 4]  882 	sbc	a, a
    00000238 DD 96 F2         [19]  883 	sub	a, -14 (ix)
    0000023B DD 77 F8         [19]  884 	ld	-8 (ix), a
                                    885 ;F:\www\light\MSXgl\engine/src/scroll.c:242: for(u8 y = 0; y < (SCROLL_DST_H); ++y)
    0000023E 3E 20            [ 7]  886 	ld	a, #0x20
    00000240 DD 96 F7         [19]  887 	sub	a, -9 (ix)
    00000243 DD 77 F9         [19]  888 	ld	-7 (ix), a
    00000246 9F               [ 4]  889 	sbc	a, a
    00000247 DD 96 F8         [19]  890 	sub	a, -8 (ix)
    0000024A DD 77 FA         [19]  891 	ld	-6 (ix), a
    0000024D DD 36 FF 00      [19]  892 	ld	-1 (ix), #0x00
    00000251                        893 00117$:
    00000251 DD 7E FF         [19]  894 	ld	a, -1 (ix)
    00000254 D6 14            [ 7]  895 	sub	a, #0x14
    00000256 D2rF5r02         [10]  896 	jp	NC, 00119$
                                    897 ;F:\www\light\MSXgl\engine/src/scroll.c:245: if(TILE_X + (SCROLL_DST_W) > (SCROLL_SRC_W))
    00000259 DD 7E F1         [19]  898 	ld	a, -15 (ix)
    0000025C DD 77 FB         [19]  899 	ld	-5 (ix), a
    0000025F DD 7E F2         [19]  900 	ld	a, -14 (ix)
    00000262 DD 77 FC         [19]  901 	ld	-4 (ix), a
    00000265 DD 7E FB         [19]  902 	ld	a, -5 (ix)
    00000268 C6 20            [ 7]  903 	add	a, #0x20
    0000026A DD 77 FD         [19]  904 	ld	-3 (ix), a
    0000026D DD 7E FC         [19]  905 	ld	a, -4 (ix)
    00000270 CE 00            [ 7]  906 	adc	a, #0x00
    00000272 DD 77 FE         [19]  907 	ld	-2 (ix), a
                                    908 ;F:\www\light\MSXgl\engine/src/scroll.c:247: VDP_WriteVRAM_16K((const u8*)src, dst, sw);
    00000275 DD 4E F3         [19]  909 	ld	c, -13 (ix)
    00000278 DD 46 F4         [19]  910 	ld	b, -12 (ix)
                                    911 ;F:\www\light\MSXgl\engine/src/scroll.c:245: if(TILE_X + (SCROLL_DST_W) > (SCROLL_SRC_W))
    0000027B 3E 80            [ 7]  912 	ld	a, #0x80
    0000027D DD BE FD         [19]  913 	cp	a, -3 (ix)
    00000280 3E 00            [ 7]  914 	ld	a, #0x00
    00000282 DD 9E FE         [19]  915 	sbc	a, -2 (ix)
    00000285 30 39            [12]  916 	jr	NC, 00107$
                                    917 ;F:\www\light\MSXgl\engine/src/scroll.c:247: VDP_WriteVRAM_16K((const u8*)src, dst, sw);
    00000287 C5               [11]  918 	push	bc
    00000288 DD 6E F7         [19]  919 	ld	l, -9 (ix)
                                    920 ;	spillPairReg hl
                                    921 ;	spillPairReg hl
    0000028B DD 66 F8         [19]  922 	ld	h, -8 (ix)
                                    923 ;	spillPairReg hl
                                    924 ;	spillPairReg hl
    0000028E E5               [11]  925 	push	hl
    0000028F DD 5E F5         [19]  926 	ld	e, -11 (ix)
    00000292 DD 56 F6         [19]  927 	ld	d, -10 (ix)
    00000295 69               [ 4]  928 	ld	l, c
                                    929 ;	spillPairReg hl
                                    930 ;	spillPairReg hl
    00000296 60               [ 4]  931 	ld	h, b
                                    932 ;	spillPairReg hl
                                    933 ;	spillPairReg hl
    00000297 CDr00r00         [17]  934 	call	_VDP_WriteVRAM_16K
    0000029A C1               [10]  935 	pop	bc
                                    936 ;F:\www\light\MSXgl\engine/src/scroll.c:248: VDP_WriteVRAM_16K((const u8*)src - TILE_X, dst + sw, (SCROLL_DST_W) - sw);
    0000029B DD 7E F5         [19]  937 	ld	a, -11 (ix)
    0000029E DD 86 F7         [19]  938 	add	a, -9 (ix)
    000002A1 5F               [ 4]  939 	ld	e, a
    000002A2 DD 7E F6         [19]  940 	ld	a, -10 (ix)
    000002A5 DD 8E F8         [19]  941 	adc	a, -8 (ix)
    000002A8 57               [ 4]  942 	ld	d, a
    000002A9 79               [ 4]  943 	ld	a, c
    000002AA DD 96 F1         [19]  944 	sub	a, -15 (ix)
    000002AD 6F               [ 4]  945 	ld	l, a
                                    946 ;	spillPairReg hl
                                    947 ;	spillPairReg hl
    000002AE 78               [ 4]  948 	ld	a, b
    000002AF DD 9E F2         [19]  949 	sbc	a, -14 (ix)
    000002B2 67               [ 4]  950 	ld	h, a
                                    951 ;	spillPairReg hl
                                    952 ;	spillPairReg hl
    000002B3 DD 4E F9         [19]  953 	ld	c, -7 (ix)
    000002B6 DD 46 FA         [19]  954 	ld	b, -6 (ix)
    000002B9 C5               [11]  955 	push	bc
    000002BA CDr00r00         [17]  956 	call	_VDP_WriteVRAM_16K
    000002BD C3rCFr02         [10]  957 	jp	00108$
    000002C0                        958 00107$:
                                    959 ;F:\www\light\MSXgl\engine/src/scroll.c:252: VDP_WriteVRAM_16K((const u8*)src, dst, (SCROLL_DST_W));
    000002C0 21 20 00         [10]  960 	ld	hl, #0x0020
    000002C3 E5               [11]  961 	push	hl
    000002C4 DD 5E F5         [19]  962 	ld	e, -11 (ix)
    000002C7 DD 56 F6         [19]  963 	ld	d, -10 (ix)
    000002CA 69               [ 4]  964 	ld	l, c
                                    965 ;	spillPairReg hl
                                    966 ;	spillPairReg hl
    000002CB 60               [ 4]  967 	ld	h, b
                                    968 ;	spillPairReg hl
                                    969 ;	spillPairReg hl
    000002CC CDr00r00         [17]  970 	call	_VDP_WriteVRAM_16K
    000002CF                        971 00108$:
                                    972 ;F:\www\light\MSXgl\engine/src/scroll.c:253: src += (SCROLL_SRC_W);
    000002CF DD 4E F3         [19]  973 	ld	c, -13 (ix)
    000002D2 DD 46 F4         [19]  974 	ld	b, -12 (ix)
    000002D5 21 80 00         [10]  975 	ld	hl, #0x0080
    000002D8 09               [11]  976 	add	hl, bc
    000002D9 DD 75 F3         [19]  977 	ld	-13 (ix), l
    000002DC DD 74 F4         [19]  978 	ld	-12 (ix), h
                                    979 ;F:\www\light\MSXgl\engine/src/scroll.c:254: dst += SCROLL_SCREEN_W;
    000002DF DD 4E F5         [19]  980 	ld	c, -11 (ix)
    000002E2 DD 46 F6         [19]  981 	ld	b, -10 (ix)
    000002E5 21 20 00         [10]  982 	ld	hl, #0x0020
    000002E8 09               [11]  983 	add	hl, bc
    000002E9 DD 75 F5         [19]  984 	ld	-11 (ix), l
    000002EC DD 74 F6         [19]  985 	ld	-10 (ix), h
                                    986 ;F:\www\light\MSXgl\engine/src/scroll.c:242: for(u8 y = 0; y < (SCROLL_DST_H); ++y)
    000002EF DD 34 FF         [23]  987 	inc	-1 (ix)
    000002F2 C3r51r02         [10]  988 	jp	00117$
    000002F5                        989 00119$:
                                    990 ;F:\www\light\MSXgl\engine/src/scroll.c:256: }
    000002F5 DD F9            [10]  991 	ld	sp, ix
    000002F7 DD E1            [14]  992 	pop	ix
    000002F9 C9               [10]  993 	ret
                                    994 	.area _CODE
                                    995 	.area _INITIALIZER
                                    996 	.area _CABS (ABS)
